SOCKS-прокси
    Необходимо реализовать прокси-сервер, соответствующий стандарту SOCKS версии 5.
    В параметрах программе передаётся только порт, на котором прокси будет ждать входящих подключений от клиентов.
    Из трёх доступных в протоколе команд, обязательной является только реализация команды 1 (establish a TCP/IP stream connection)
    Поддержку аутентификации и IPv6-адресов реализовывать не требуется.
    Для реализации прокси использовать неблокирующиеся сокеты, работая с ними в рамках одного треда. 
        Дополнительные треды использовать не допускается. Соответственно, никаких блокирующихся вызовов (кроме вызова селектора) 
        не допускается.
    Прокси не должна делать предположений о том, какой протокол уровня приложений будет использоваться внутри перенаправляемого TCP-соединения. 
        В частности, должна поддерживаться передача данных одновременно в обе стороны, а соединения должны закрываться аккуратно 
        (только после того, как они больше не нужны).
    В приложении не должно быть холостых циклов ни в каких ситуациях. Другими словами, не должно быть возможно состояние программы, 
        при котором неоднократно выполняется тело цикла, которое не делает ни одной фактической передачи данных за итерацию.
    Не допускается неограниченное расходование памяти для обслуживания одного клиента.
    Производительность работы через прокси не должна быть заметно хуже, чем без прокси. Для отслеживания корректности и скорости 
        работы можно глядеть в Developer tools браузера на вкладку Network.
    Прокси должен поддерживать резолвинг доменных имён (значение 0x03 в поле address). Резолвинг тоже должен быть неблокирующимся. 
        Для этого предлагается использовать следующий подход:
            На старте программы создать новый UDP-сокет и добавить его в селектор на чтение
            Когда необходимо отрезолвить доменное имя, отправлять через этот сокет DNS-запрос A-записи на адрес рекурсивного DNS-резолвера
            В обработчике чтения из сокета обрабатывать случай, когда получен ответ на DNS-запрос, и продолжать работу с полученным адресом
        Для получения адреса рекурсивного резолвера, а также для формирования и парсинга DNS-сообщений на Java предлагается использовать библиотеку dnsjava (для других языков найдите сами).
    
    Для тестирования можно настроить любой Web-браузер на использование вашего прокси, и посещать любые веб-сайты, богатые контентом.

    ? в чем отличие простого сервера от прокси?
    - простой http-сервер сам отвечает на запросы от клиентов.
        Пример работы такого TCP-сервера из lab7task2:
            void handle_client(int client_sock_fd) {
                char buffer[BUFFER_SIZE]; // буфер для приема/отправки данных клиента
                ssize_t bytes_read;
                
                // цикл работает пока присвоенный bytes_read результат работы recv - чтения данных с сокета != 0
                while (bytes_read = recv(client_sock_fd, buffer, BUFFER_SIZE, 0)) {
                    if (bytes_read < 0) {
                        printf("recv failed");
                        break;
                    }
                    buffer[bytes_read] = '\0';
                    printf("получено %s\n", buffer);
                    // эхо-ответ обратно клиенту 
                    // send(client_sock_fd, buffer, bytes_read, 0);
                    if (send_all(client_sock_fd, buffer, bytes_read) < 0) {
                        printf("send_all (send(s)) failed");
                        break;
                    }
                    memset(buffer, 0, BUFFER_SIZE);
                }

                close(client_sock_fd);
                exit(0);
            } 

    как запускать: 
        1 терминал: 
            gcc -o proxy socks_proxy.c && sudo ./proxy 80
        2 терминал: 
            curl -v --socks5-hostname 127.0.0.1:5000 http://example.com

    команды:
        FD_ZERO - обнуление всего множества
            #define __FD_ZERO(s) \
            do {									      \
                unsigned int __i;							      \
                fd_set *__arr = (s);						      \
                for (__i = 0; __i < sizeof (fd_set) / sizeof (__fd_mask); ++__i)	      \
                    __FDS_BITS (__arr)[__i] = 0;					      \
            } while (0)

            sizeof(fd_set) / sizeof(__fd_mask) - сколько слов __fd_mask хранится в fd_set
            цикл for обходит каждое слово массива __FDS_BITS и присваивает ему 0
            РЕЗУЛЬТАТ: все биты (т.е. все дескрипторы) помечены как недоступные для чтения

        FD_SET - установка бита дескриптора
            #define __FD_SET(d, s) \
            ((void) (__FDS_BITS (s)[__FD_ELT(d)] |= __FD_MASK(d)))

            __FD_ELT(d) даёт номер слова в массиве, где хранится бит для дескриптора d
            __FD_MASK(d) формирует маску, у которой 1 - именно та позиция (бит внутри слова), что соответствует d
            |= - побитовое "или" - устанавливаю в 1 нужный бит, не затрагивая другие

        FD_ISSET - проверка бита дескриптора
            #define __FD_ISSET(d, s) \
            ((__FDS_BITS (s)[__FD_ELT (d)] & __FD_MASK (d)) != 0)

            берём слово __FDS_BITS[__FD_ELT(d)] и маскируем его операцией & __FD_MASK(d)
            if результат != 0, значит бит был установлен (=1) - дескриптор присутствует в множестве. Иначе - нет.

        FD_CLR - сброс бита дескриптора
            #define __FD_CLR(d, s) \
            ((void) (__FDS_BITS (s)[__FD_ELT(d)] &= ~__FD_MASK(d)))

            1 в 1 как и в FD_SET находим слово и формируем маску
            ~__FD_MASK(d) - инвертированная маска, у которой только нужный бит = 0, остальные 1
            &= (обнуляет) этот бит, сохраняя все остальные биты без изменений

        select 
            int select(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
                n - количество дескрипторов которые следят за изменением статуса
                *readfds - указатель на множество дескрипторов сокетов, которые следят за изменением статуса для чтения
                *writefds - указатель на множество дескрипторов сокетов, которые следят за изменением статуса для записи
                *exceptfds - указатель на множество дескрипторов сокетов, которые следят за изменением статуса для исключений
                *timeout - указатель на структуру timeval, содержащую время ожидания в секундах и миллисекундах

            ждет изменения статуса хотя бы одного из файловых описателей
            ВОЗВРАЩАЕТ: общее количество дескрипторов сокетов, которые готовы и содержатся в структурах fd_set

            в моем случае: 
                select(max_fd + 1, &temp_fds, NULL, NULL, NULL)
                блокируется выполнение пока хотя бы 1 из temp_fds не готов к чтению 

            https://www.opennet.ru/man.shtml?topic=select&category=2&russian=0
            https://learn.microsoft.com/ru-ru/windows/win32/api/winsock2/nf-winsock2-select

            english only: Before select() is called, the application creates one or more of the 
                readfds, writefds, or exceptfds bitmaps, by asserting bits corresponding to the set of interesting file descriptors. 
                On its return, select() overwrites these bitmaps with new values, corresponding to subsets of the input sets, 
                indicating which file descriptors are available for I/O.
            отсюда: https://www.usenix.org/legacy/event/usenix99/full_papers/banga/banga_html/node3.html

        getpeername
            int getpeername(int s, struct sockaddr *name, socklen_t *namelen)
                s - дескриптор сокета
                name - указатель на структуру с информацией о соединении
                namelen - указатель на длину структуры name

            получает имя машины, подключившейся к сокету s. namelen инициализирован в целях отображения объема памяти, который занимает name.
                По возвращении он содержит размер памяти, занимаемый именем машины (байт).
            ВОЗВРАЩАЕТ: при удачном завершении возвращается 0. При ошибке -1.

            в моем случае: 
                getpeername(sd, (struct sockaddr*)&client_addr, &client_len);
            значит в client_addr теперь хранится имя машины, подключившейся к сокету sd

            https://www.opennet.ru/man.shtml?topic=getpeername&category=2&russian=0

    ?   почему select перебирая ФД не сжигает ресурс процессора
    -   когда вызываю select() с таймаутом NULL, процесс переходит в состояние "ожидания события" в ядре - 
            система ставит его в очередь "заблокированных" задач (не активен, не потребляет CPU), освобождая CPU для других задач, 
            до тех пор, пока не пройзойдет что-то на отслеживаемых fd. 
            Как только на любом из отслеживаемых fd появляется готовность (например, 
            новые данные (у меня это входящее соединение)), ядро "пробуждает" процесс и возвращает 
            управление в приложение (user space). Между этими событиями ваш процесс не потребляет 
            такты CPU.
        Если бы в коде был busy-wait - код в пользовательском пространстве в цикле без остановок постоянно опрашивает условие.
            ПРИМЕР: while (!ready) {}
            то нагрузка на CPU действительно будет расти.

        select() блокируется в kernel space (а значит не потребляет CPU), он не опрашивает дескрипторы в user space. 

        select() starts by checking, for each descriptor present in the input bitmaps, whether that descriptor 
            is already available for I/O. If none are available, then select() blocks. Later, when a protocol 
            processing (or file system) module's state changes to make a descriptor readable or writable, 
            that module awakens the blocked process. The awakened process has no idea which descriptor 
            has just become readable or writable, so it must repeat its initial scan.

        распорядок дня select(): 
            0 (до вызова select()) - application creates one or more of the readfds, writefds, or exceptfds 
                bitmaps, by asserting bits corresponding to the set of interesting file descriptors
            1 в user space: скан битмапов readfds, writefds, и exceptfds на наличие готовых дескрипторов
            2 если нет, то select() блокируется (переход в kernel space)
            3 ядро мониторит состояния всех регистрируемых fd
            4 если на любом из fd появляется готовность, то select() пробуждается (переход в user space)
            5 скан битмапов

            возвращает обновленные битмапы с готовыми дескрипторами

        взял отсюда: https://www.usenix.org/legacy/event/usenix99/full_papers/banga/banga_html/node3.html

    логика работы: 
        1) активный клиент из clients с статусом 0 отправляет "Client greeting" серверу:
            VER, NAUTH, AUTH:
                VER: SOCKS версия
                NAUTH: количество методов авторизации
                AUTH: метод(ы) авторизации
        сервер получает 05 02 00 01, что означает что дано 2 метода авторизации, первый - No authentication, второй - GSSAPI
        сервер в ответ отправляет "Server choice" активному клиенту:
            VER, CAUTH:
                VER: SOCKS версия
                CAUTH: выбранный метод авторизации
        клиент поймет какой из предложенных методов авторизации выбран сервером и получит статус 1 - запрос на подключение 

        2) активный клиент из clients с статусом 1 отправляет "Client connection request" серверу:
            VER, CMD, RSV, ATYP, DST.ADDR, DST.PORT:
                VER: SOCKS версия
                CMD: команда (0x01: establish a TCP/IP stream connection)
                RSV: зарезервировано (0x00) 
                ATYP: тип адреса (0x01: IPv4)
                DST.ADDR: целевой IP-адрес 
                DST.PORT: целевой порт
        сервер получает (например) 05 01 00 01 60 07 80 C6 00 50 
            05 - SOCKS5, 
            01 - establish a TCP/IP stream connection, 
            00 - RSV, 
            01 - IPv4,
            60 07 80 C6 - целевой IP-адрес,
            00 50 - целевой порт (80)
        сервер в ответ отправляет "Response packet from server" активному клиенту:
            VER, STATUS, RSV, BNDADDR, BNDPORT:
                VER: SOCKS версия
                STATUS: статус (0x00: request granted)
                RSV: зарезервировано (0x00)
                BNDADDR: IPv4 адрес, на который соединение установлено
                BNDPORT: порт, на который соединение установлено

        3) после устанвки соединения в 2) работаем двусторонне отправляя данные (полнодуплексный канал связи):
            клиент отправляет данные на целевой сервер: 
                данные читаются в clients[i].buffer
                при готовности сокета целевого сервера к записи (FD_ISSET(target_fd, &temp_write))
                данные из буфера отправляются целевому серверу (отправляется в target_fd send()-ом)
                после отправки буфер сдвигается на размер отправленных данных memmove()-ом
            
            целевой сервер отправляет данные клинету:
                данные читаются во временный буфер temp_buf 
                сразу пересылаются клиенту
